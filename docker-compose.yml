version: '3.7'

services:
  web:
    build: ./app
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./app/:/usr/src/app/
    ports:
      - 8000:8000
    hostname: master
    environment:
      - DEBUG=${DEBUG}
      - SECRET_KEY=${SECRET_KEY}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}
      - SQL_ENGINE=${SQL_ENGINE}
      - SQL_DATABASE=${SQL_DATABASE}
      - SQL_USER=${SQL_USER}
      - SQL_PASSWORD=${SQL_PASSWORD}
      - SQL_HOST=${SQL_HOST}
      - SQL_PORT=${SQL_PORT}
      - DATABASE=${DATABASE}
      - CELERY_BROKER=redis://redis:6379/0
      - CELERY_BACKEND=redis://redis:6379/0
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_PHONE_NUMBER=${TWILIO_PHONE_NUMBER}

    depends_on:
      - db
  geo:
    build: ./geocoder
    command: python manage.py runserver 0.0.0.0:8022
    volumes:
      - ./geocoder/:/usr/src/geo/
    ports:
      - 8022:8022
    hostname: geo
    environment:
      - DEBUG=${DEBUG_GEO}
      - SECRET_KEY=${SECRET_KEY_GEO}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS_GEO}
      - SQL_ENGINE=${SQL_ENGINE_GEO}
      - SQL_DATABASE=${SQL_DATABASE_GEO}
      - SQL_USER=${SQL_USER_GEO}
      - SQL_PASSWORD=${SQL_PASSWORD_GEO}
      - SQL_HOST=${SQL_HOST_GEO}
      - SQL_PORT=${SQL_PORT_GEO}
      - DATABASE=${DATABASE_GEO}
    depends_on:
      - db
  driver-finder:
    build: ./driver-finder
    hostname: finder
    image: app-image
    command: python manage.py runserver 0.0.0.0:8023
    volumes:
      - ./driver-finder/:/usr/src/driver-finder/
    ports:
      - 8023:8023
    environment:
      - DEBUG=${DEBUG_FINDER}
      - SECRET_KEY=${SECRET_KEY_FINDER}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS_FINDER}
      - SQL_ENGINE=${SQL_ENGINE_FINDER}
      - SQL_DATABASE=${SQL_DATABASE_FINDER}
      - SQL_USER=${SQL_USER_FINDER}
      - SQL_PASSWORD=${SQL_PASSWORD_FINDER}
      - SQL_HOST=${SQL_HOST_FINDER}
      - SQL_PORT=${SQL_PORT_FINDER}
      - DATABASE=${DATABASE_FINDER}
      - FCM_TOKEN=${FCM_TOKEN}
    depends_on:
      - db
  db:
    image: postgres:12.0-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=${SQL_USER}
      - POSTGRES_PASSWORD=${SQL_PASSWORD}
      - POSTGRES_DB=${SQL_DATABASE}

  redis:
    image: "redis:alpine"
    hostname: redis
    ports:
      - "6379:6379"
    expose:
      - "6380"
    volumes:
      - type: volume
        source: redis-data
        target: /data

  # rabbitmq:
  #   container_name: rabbitmq
  #   hostname: rabbitmq
  #   image: rabbitmq:latest
    
  #   ports:
  #     - "5672:5672"
  #   restart: on-failure

  celery_worker:
    build: ./driver-finder
    command: celery -A finder worker -l debug
    container_name: celery_worker
    image: app-image
    environment:
      - DEBUG=${DEBUG}
      - SECRET_KEY=${SECRET_KEY}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}
      - SQL_ENGINE=${SQL_ENGINE}
      - SQL_DATABASE=${SQL_DATABASE}
      - SQL_USER=${SQL_USER}
      - SQL_PASSWORD=${SQL_PASSWORD}
      - SQL_HOST=${SQL_HOST}
      - SQL_PORT=${SQL_PORT}
      - DATABASE=${DATABASE}
      - CELERY_BROKER=redis://redis:6379/0
      - CELERY_BACKEND=redis://redis:6379/0
    depends_on:
      - web
      - db
      - redis
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.50'
          memory: 50M
        reservations:
          cpus: '0.25'
          memory: 20M
    hostname: celery_worker
    
    restart: on-failure

  flower:  
    image: mher/flower
    hostname: flower
    command: ["flower", "--broker=redis://redis:6379/0", "--port=8888"]
    depends_on:
      - redis
      - celery_worker
    ports:  
      - 8888:8888  

  prometheus:
    image: prom/prometheus:v2.21.0
    ports:
      - 9000:9090
    hostname: prometheus
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command: --web.enable-lifecycle  --config.file=/etc/prometheus/prometheus.yml

  # celery_beat:
  #   command: sh -c "wait-for rabbitmq:5672 && wait-for web:8000 -- celery -A mysite beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler"
  #   container_name: celery_beat
  #   depends_on:
  #     - web
  #     - postgres
  #     - rabbitmq
  #   hostname: celery_beat
  #   image: app-image
    
  #   restart: on-failure

volumes:
  postgres_data:
  redis-data: {}
  prometheus-data: